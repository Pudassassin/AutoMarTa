Proposal : A game to teach programming.

[Requirements]
  A: How to teach? [Cancelled]

  B: Programming Mechanic
    PL-T1: Structured (Sequential, "classic")
      1.0 concepts

      1.1 Program Structure
        * visualize common used code blocks / structures
        + log "Hello, world!"
        + basic function (usage)

      1.2 Variables
        Global (External) / Local (Internal)

        + variable type
          - Tags (Enums)
          - Number (Int or Real)
          - Position (Coordination)
          - Boolean

          - Object/Entity reference

        + storage [*can be nested, should limit?]
          - single
          - array (one type, fix-sized, 1/2D?)
          - list (of same type)
          - structure (type combo)
        
        + data processing
          - arithmetics
          - extract/construct
          - list functions

      1.3 Looping Structures
        + for loop (constant/variable, fixed no. of exec. loop times)
        + while loop (do-while/while-do, conditional loop)
        
      1.4 Control Structures
        + if-else
        + switch-case

      1.5 Syntax [Already structured]

  C: Game Design (Detailed version is in separated file -> Game Design)
    GDD-1 Overviews
      Working Title: "Auto-Mar-Ta"
      Concept :   An RTS/automation game to introduce player to concepts of programming.
      Theme :     Sci-fi
      Setting :   Mars Expandation (+ first E.T. encounter/ Mars disaster)
      Genre :     RTS + Automation (+ Management?)

    GDD-?A 
      T0 : Robot Standards
        0.1 Operation mode
          Auto : Programable automations
            - has debug mode, step, (re)start, halt
            * can toggle between mode, reboot, shutdown

          Manual : RTS-style commanding/Management
            - has limitation on how many you can manually control the automation
            - delayed Earth command
              -> beacon system
              -> construction order (buildings)
              -> manufaction order (robots)

        0.2 Library
          0.2.1 standardIO
          - terminal, messaging
            (log, debug, warning, error)
            *with arguement to show them in the overworld

          - identifier, tags

          0.2.2 standardRobot
          - movement (primitive)
            (forward, backward, rotate)

          - itemHandling
            (pickup, drop, pushIn, pullOut)

          - mining
            (mine[ground, rock, mountain, debris])

          - combat
            (meleeAt, shootAt)

          - construction
            (build, deconstruct)

          - scan
            (scanOre, scanBuilding, scanEntity)

[References]
  Programming Concept
    https://blog.programminghub.io/blog/2016/06/14/5-basic-concepts-programming-language/
    
  Game Design Document templates
    https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit
